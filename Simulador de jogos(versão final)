#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define QT 4

  void introducao();
  void rodadas();
  void tabela();
  void ordenacao();
  int ordenacao_pont();
  int ordenacao_sg();
  int ordenacao_v();  
  int ordenacao_gp();


    struct dados
    {   
      char nome[20];
      int pont, jg, v, d, e; 
      int gp, gc, sg;
    } time[QT]; 


    int main(){

      introducao();

      rodadas();

      ordenacao();

      tabela();

     return 0;
    }


    void introducao(){

      printf("Simulcao de um campeonato de futebol. Digite %d times que você deseja que participem da competição:\n", QT);

    for(int i = 0 ; i < QT ; i++){
      fgets(time[i].nome, 20 , stdin);
    
    size_t tam = strlen(time[i].nome) - 1;
      
    if (time[i].nome[tam] == '\n')
      time[i].nome[tam] = '\0';      
      }
    }


    void rodadas(){ 

      printf("\nPartidas:\n");      

      int ga, gb;

      for(int a = 0 ; a < QT ; a++){
        for(int b = 0 ; b < QT ; b++){
          if(a != b){

            printf("\n%s x %s\n\n", time[a].nome, time[b].nome);
            printf("%s:", time[a].nome);
            scanf("%d", &ga);
            printf("%s:", time[b].nome);
            scanf("%d", &gb);

            time[a].gp = time[a].gp + ga;
            time[b].gp = time[b].gp + gb;

            time[a].gc = time[a].gc + gb;
            time[b].gc = time[b].gc + ga;

            time[a].sg = time[a].gp - time[a].gc;
            time[b].sg = time[b].gp - time[b].gc;
            
            time[a].jg++;
            time[a].jg++;            

          if( ga > gb){
            time[a].pont = time[a].pont + 3;
            time[a].v++;
            time[b].d++;
          }
          else if ( ga < gb){
            time[b].pont = time[b].pont + 3;
            time[b].v++;
            time[a].d++;
          }
          else if ( ga == gb){
            time[a].pont++;
            time[b].pont++;
            time[a].e++;
            time[b].e++;
            }
          }
        }
      }
    } 


    void tabela(){

      printf("\n\n\t\t\t\t\t\tTABELA\n");
      printf("\n\tTime");
      printf("\tJG");
      printf("\tPT");
      printf("\tV");
      printf("\tE");
      printf("\tD");
      printf("\tGP");
      printf("\tGC");
      printf("\tSG");
      printf("\tPV");

      int variavel;
      float pv[QT];
      int qj = (QT - 1) * 2;
      
      for(int i = 0 ; i < QT ; i++){
      
        variavel = 100 * time[i].v;
        pv[i] = variavel / qj;

        printf("\n\n%dº", i + 1);
        printf("\t%s", time[i].nome);
        printf("\t\t%d", time[i].jg);
        printf("\t%d", time[i].pont);
        printf("\t%d", time[i].v);
        printf("\t%d", time[i].e);
        printf("\t%d", time[i].d);
        printf("\t%d", time[i].gp);
        printf("\t%d", time[i].gc);
        printf("\t%d", time[i].sg);
        printf("\t%.f%%", pv[i]);
      }
    }


    void ordenacao(){

      qsort(time, QT , sizeof time[QT],ordenacao_gp);

      qsort(time, QT , sizeof time[QT],ordenacao_sg);

      qsort(time, QT , sizeof time[QT],ordenacao_v); 

      qsort(time, QT , sizeof time[QT],ordenacao_pont);     }


    int ordenacao_pont(const void* t1 , const void* t2){

     int ant = ((struct dados*)t1)->pont;
     int dep = ((struct dados*)t2)->pont;
     return (dep - ant);
    }


    int ordenacao_v(const void* t1, const void* t2){

      int ant = ((struct dados*)t1)->v;
      int dep = ((struct dados*)t2)->v;
      return (dep - ant);
    }


    int ordenacao_sg(const void* t1, const void* t2){

      int ant = ((struct dados*)t1)->sg;
      int dep = ((struct dados*)t2)->sg;
      return (dep - ant);
    }
    

    int ordenacao_gp(const void* t1, const void* t2){

      int ant = ((struct dados*)t1)->gp;
      int dep = ((struct dados*)t2)->gp;
      return (dep - ant); 
    }
